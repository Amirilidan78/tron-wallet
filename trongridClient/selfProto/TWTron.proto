syntax = "proto3";

package proto;

option go_package = "pkg/twallet/proto";

message TronTransferContract {
    // Sender address.
    string owner_address = 1;

    // Recipient address.
    string to_address = 2;

    // Amount to send.
    int64 amount = 3;
}

message TronTransferAssetContract {
    // Asset name.
    string asset_name = 1;

    // Sender address.
    string owner_address = 2;

    // Recipient address.
    string to_address = 3;

    // Amount to send.
    int64 amount = 4;
}

message TronTransferTRC20Contract {
    // Contract name.
    string contract_address = 1;

    // Sender address.
    string owner_address = 2;

    // Recipient address.
    string to_address = 3;

    // Amount to send, uint256, big-endian.
    bytes amount = 4;
}

message TronFreezeBalanceContract {
    // Sender address.
    string owner_address = 1;
    // Frozen balance. Minimum 1
    int64 frozen_balance = 2;
    // Frozen duration
    int64 frozen_duration = 3;
    // Resource type: BANDWIDTH | ENERGY
    string resource = 10;
    // Receiver address
    string receiver_address = 15;
}

message TronUnfreezeBalanceContract {
    // Sender address
    string owner_address = 1;
    // Resource type: BANDWIDTH | ENERGY
    string resource = 10;
    // Receiver address
    string receiver_address = 15;
}

message TronUnfreezeAssetContract {
    // Sender address
    string owner_address = 1;
}

message TronVoteAssetContract {
    // Sender address
    string owner_address = 1;
    // Vote addresses
    repeated string vote_address = 2;
    bool support = 3;
    int32 count = 5;
}

message TronVoteWitnessContract {
    message Vote {
        string vote_address = 1;
        int64 vote_count = 2;
    }
    string owner_address = 1;
    repeated Vote votes = 2;
    bool support = 3;
}

message TronWithdrawBalanceContract {
    // Sender address
    string owner_address = 1;
}

message TronTriggerSmartContract {
    string owner_address = 1;
    string contract_address = 2;
    int64 call_value = 3;
    bytes data = 4;
    int64 call_token_value = 5;
    int64 token_id = 6;
}

message TronBlockHeader {
    int64 timestamp = 1;
    bytes tx_trie_root = 2;
    bytes parent_hash = 3;
    int64 number = 7;
    bytes witness_address = 9;
    int32 version = 10;
}

message TronTransaction {
    // Transaction timestamp in milliseconds.
    int64 timestamp = 1;

    // Transaction expiration time in milliseconds.
    int64 expiration = 2;

    // Transaction block header.
    TronBlockHeader block_header = 3;

    // Transaction fee limit
    int64 fee_limit = 4;

    // Contract.
    oneof contract_oneof {
        TronTransferContract transfer = 10;
        TronTransferAssetContract transfer_asset = 11;
        TronFreezeBalanceContract freeze_balance = 12;
        TronUnfreezeBalanceContract unfreeze_balance = 13;
        TronUnfreezeAssetContract unfreeze_asset = 14;
        TronWithdrawBalanceContract withdraw_balance = 15;
        TronVoteAssetContract vote_asset = 16;
        TronVoteWitnessContract vote_witness = 17;
        TronTriggerSmartContract trigger_smart_contract = 18;
        TronTransferTRC20Contract transfer_trc20_contract = 19;
    }
}

message TronSigningInput {
    // Transaction.
    TronTransaction transaction = 1;

    // Private key.
    bytes private_key = 2;
}

// Transaction signing output.
message TronSigningOutput {
    // Transaction identifier.
    bytes id = 1;

    // Signature.
    bytes signature = 2;

    bytes ref_block_bytes = 3;
    bytes ref_block_hash = 4;

    string json = 5;
}